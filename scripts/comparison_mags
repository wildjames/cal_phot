#!/usr/bin/env python3

from os import remove
from os.path import split

import calphot.logger as logger
import hipercam as hcam
import numpy as np
from calphot.constructReference import get_comparison_magnitudes, load_stds
from pandas import read_csv


if __name__ in "__main__":
    import argparse

    parser = argparse.ArgumentParser("Calculate the apparent magnitude of each aperture in a run, calibrated from a standard star observation. For now, uses SDSS magnitudes, UNMODIFIED, from Smith (2002).")
    parser.add_argument(
        "std_fname",
        help="The logfile reduction of the standard star"
    )
    parser.add_argument(
        "comp_fname",
        help="The logfile reduction of the comparison stars, with the same settings as the standard"
    )
    parser.add_argument(
        "observatory",
        help="The name of the observing site",
        nargs='+'
    )

    args = parser.parse_args()
    std_fname = args.std_fname
    comp_fname = args.comp_fname
    obsname = ','.join(args.observatory)

    comp_coords = input("Please enter the comparison stars' RA and Dec, space separated (for airmass calc): ")

    tels = ['ucam', 'uspec']
    # insts = ['ucam']
    # filts = ['super', 'regular']

    # telescope = input("What telescope was this observed with? ({}): ".format(tels))
    # instrument = input("What instrument was this observed with? ({}): ".format(insts))
    # filt = input("What filter set did you use? ({}): ".format(filts))

    # Load in the standard star data
    std_data = load_stds('stock')

    # Get the star from the user
    std_name = input("Please enter the standard star's name: ")
    while std_name not in std_data['StarName'].values:
        print(std_data['StarName'])
        print("Star list: https://classic.sdss.org/dr7/algorithms/standardstars/tab08.dat.txt")
        std_name = input("I couldn't find that star.\nPlease enter a star name: ")

    std_row = std_data.loc[std_data['StarName'] == std_name]

    std_coords = " ".join(std_row["RA (J2000.0)"].append(std_row["DEC (J2000.0)"]))

    # ugriz are easy
    std_magnitudes = {
        "r": float(std_row["r'"]),
        "g": float(std_row["r'"]) + float(std_row["g'-r'"])
    }
    std_magnitudes["u"] = std_magnitudes["g"] + float(std_row["u'-g'"])
    std_magnitudes["i"] = std_magnitudes["r"] - float(std_row["r'-i'"])
    std_magnitudes["z"] = std_magnitudes["i"] - float(std_row["i'-z'"])

    # Interpolate KG5
    g = std_magnitudes["g"]
    r = std_magnitudes["r"]
    std_magnitudes['kg5'] = g - 0.2240*(g-r)**2 - 0.3590*(g-r) + 0.0460

    # Ask the user if this is correct
    print("Using this standard star:")
    print("  RA, Dec: {}".format(std_coords))
    print("  Magnitudes:")
    for band, mag in std_magnitudes.items():
        print("    {}: {:.3f}".format(band, mag))
    print("\n\n")

    # Get the standard observations, so we know how many CCDs we're dealing with
    std_data = hcam.hlog.Hlog.rascii(std_fname)
    aps = std_data.apnames
    nCCD = len(aps.keys())
    print("The standard reduction in {} has {} CCDs".format(std_fname, nCCD))

    # I need to filter out any times with NAN data. For each CCD, check all aps for nan. if any are nan, remove that frame.
    for CCD in std_data.apnames:
        lightcurves = [std_data.tseries(CCD, ap) for ap in std_data.apnames[CCD]]
        lightcurves = [std_data.tseries(CCD, ap).y for ap in std_data.apnames[CCD]]
        badlocs = np.where(~np.isfinite(lightcurves))
        goodlocs = np.where(np.isfinite(lightcurves))

        badlocs = np.unique(badlocs[1])
        goodlocs = np.unique(goodlocs[1])

        if len(badlocs):
            print("In CCD {}, I found {} frames with nan fluxes! I will remove these".format(CCD, len(badlocs)))
            print("These were at indexes:")
            print(badlocs)
            input("Hit enter to continue...  ")

        std_data[CCD] = std_data[CCD][goodlocs]

    # I need to know what filters the CCDs are in.
    print("What bands are the CCDs in?")
    std_CCD_mags = []
    bands = []
    for i in range(nCCD):
        band = input("Please enter the band of CCD {}: ".format(i+1)).lower()
        bands.append(band)
        if band in std_magnitudes.keys():
            std_CCD_mags.append(std_magnitudes[band])
        else:
            print("I don't know the SDSS magnitude of the star in that band!!")
            print("Please enter a magnitude for me to use:")
            mag = float(input("> "))
            std_CCD_mags.append(mag)

        print("   Band {} magnitude: {:.3f}\n".format(band, std_CCD_mags[-1]))

    # Extinction coefficients
    ext = []
    print("\n\nPlease give me the extinction of each CCD, in order:")
    for band in bands:
        print("Currently, I have extinctions (mags/airmass): {}".format(ext))
        ex = input("Enter k_(ext) for band {}: ".format(band))
        ex = float(ex)
        ext.append(ex)

    flags = input("Enter any flags you want to ignore, space separated: ")
    if len(flags):
        flags = [int(f) for f in flags.split(' ')]
    else:
        flags = []

    # The user has to be careful. Try and be annoying about this
    print("\nPlease type 'yes' to confirm that this is correct!")
    while input("> ") != "yes":
        print("You gotta be careful about this!")

    # Run the actual thing
    try:
        remove("ComparisonMags.LOGS")
    except:
        pass

    logger.FNAME = "ComparisonMags.LOGS"
    logger.printer("----- comparison_mags script collected the following arguments -----\n\n")
    # logger.printer("Instrument: {}".format(telescope))
    logger.printer("\nStandard filename: {}".format(std_fname))
    logger.printer("Comparison reduction: {}".format(comp_fname))
    logger.printer("\nStd coordinates: {}".format(std_coords))
    logger.printer("Comparison coordinates: {}".format(comp_coords))
    logger.printer("\nCCD filters: {}".format(bands))
    logger.printer("\nStandard magnitudes, in CCD order: {}".format(std_CCD_mags))
    logger.printer("Extinction coefficients (CCD order): {}".format(ext))
    logger.printer("Observed from {}".format(obsname))
    logger.printer("\n\n\n")

    mags = get_comparison_magnitudes(
        std_fname, comp_fname,
        std_coords, comp_coords,
        std_CCD_mags,
        obsname,
        ext, fname="ComparisonMags.LOGS",
        FLAGS_TO_IGNORE=flags
    )

    print("Here's the bloc that you'll want to put in the config YAML for cal_phot (remember to remove the target!):")
    for i, CCD in mags.items():
        string = ["{:.3f}".format(mag) for mag in CCD]
        print("        {}: [{}]".format(bands[int(i)-1], ','.join(string)))
